"""Functions for detecting and patrolling RfD'd pages

When a redirect is nominated for discussion at RfD, it is placed in the
articles queue of Special:NewPagesFeed.  These functions identify such
"articles", double-check that they've been filed to RfD, and, if so,
patrol them.  After 30 minutes of not being filed to RfD, a page is
logged as such on-wiki.
"""
import datetime as dt
import re

import mwparserfromhell as parser
import pywikibot as pwb
from pywikibot import Page, Site

from utils import log_onwiki, log_local

# This is only guaranteed to match the output of {{subst:rfd}}.  If for
# some reason someone manually added the subst'd output and changed with
# the spacing, it would not read as a match.  This can be changed if
# there's anyone out there actually doing that.
# Note that this does check of wikilink validity, since an invalidly-
# formulated link could still potentially land at RfD (although it would
# probably be speedily resolved).
TAGGED = re.compile(r"""\{\{<includeonly>safesubst:<\/includeonly>\#invoke:RfD\|{3}month = \w+
\|day = [ \d]\d
\|year = \d{4}
\|time = \d{2}:\d{2}
\|timestamp = \d{14}
<!-- The above content is generated by \{\{subst:rfd\}\}\. -->
<!-- End of RFD message\. Don't edit anything above here, but feel free to edit below here\. -->\|content=
\#[Rr][Ee][Dd][Ii][Rr][Ee][Cc][Tt] *\[\[.+?\]\]""")


def check_rfd(page: Page) -> bool:
    """Check if a page is subject to an ongoing RfD

    First checks for the {{subst:rfd}} tag, then for whether there's an
    entry at the corresponding RfD log page.

    Arg:
      page:  A Page corresponding to a wikipage to be checked.

    Returns:
      A bool, True if both TAGGED matches and checkfiled() returns True.
      (If the former but not the latter, the distinction is made clear
      by logs.)
    """
    return TAGGED.match(page.text) and checkfiled(page)


def checkfiled(page: Page) -> bool:
    """Check an RfD log page for an anchor matching the page's title.

    {{subst:rfd2}} makes such anchors automatically.  As with TAGGED, no
    guarantee of matching markup that renders the same way but is
    generated through some other means.

    Arg:
      page:  A Page corresponding to a wikipage tagged with
        {{subst:rfd}}.

    Returns:
      A bool indicating whether an RfD entry exists matching the page's
      title.
    """
    rfd = find_rfd(page)
    now = Site().server_time()
    if not rfd.exists():
        print(f"No RfD page for {page.title()}.")
        log_local(page, "no_rfd_logpage")
        log_onwiki(
            event=(f"\n* {page.title(as_link=True)} not filed to "
                   f"{rfd.title(as_link=True)} (currently a redlink) as  of {now}"),
            title="Unfiled RfDs",
            summary="Logging a page tagged for RfD for a date where no log page exists"
        )
        return False
    # What idiot made this line necessary by building quotation-mark
    # escaping into {{rfd2}}?  Oh right.  Me.
    escaped = page.title().replace('"', "&quot;")
    filed = f'*<span id="{escaped}">' in rfd.text
    if not filed:
        print(f"RfD not filed for {page.title()}.")
        log_local(page, "unfiledRfDs.txt")
        edited: pwb.Timestamp = page.editTime()  # Subclass of dt.datetime
        if now - edited > dt.timedelta(minutes=30):
            log_onwiki(
                event=(f"\n* {page.title(as_link=True)} not filed to "
                       f"{rfd.title(as_link=True)} as of {now}\n"),
                title="Unfiled RfDs",
                summary=("Logging a page tagged for RfD more than 30 minutes "
                         "ago, where no RfD has been filed")
            )
    return filed


def find_rfd(page: Page) -> Page:
    """Get the RfD log page referenced by an {{rfd}} substitution.

    Uses the standard RfD log format and the `year`, `month`, and `day`
    parameters in {{subst:rfd}}.  This accounts for RfDs filed to
    previous dates.  

    Arg:
      page:  A Page corresponding to a wikipage tagged with
        {{subst:rfd}}.

    Returns:
      A Page corresponding to the RfD log page.  To check whether the
      page actually exists, use .exists().
    """
    parsed = parser.parse(page.text)
    # Ugly hack around <https://github.com/earwig/mwparserfromhell/issues/251>.
    parsed.replace("<includeonly>safesubst:</includeonly>#invoke:RfD",
                   "fake template")
    template = parsed.filter_templates()[0]
    year, month, day = (template.get(s).value.strip()
                        for s in ("year", "month", "day"))
    rfd = Page(
        Site(),
        title=f"Redirects for discussion/Log/{year} {month} {day}",
        ns=4  # `Project:`
    )
    return rfd
