"""Functions for detecting and patrolling RfD'd pages

When a redirect is nominated for discussion at RfD, it is placed in the
articles queue of Special:NewPagesFeed.  These functions identify such
"articles", double-check that they've been filed to RfD, and, if so,
patrol them.  After 30 minutes of not being filed to RfD, a page is
logged as such on-wiki.
"""
import datetime as dt
import re

import mwparserfromhell as parser
import pywikibot as pwb

from utils import log_onwiki, log_local

# This is only guaranteed to match the output of {{subst:rfd}}.  If for
# some reason someone manually added the subst'd output and changed with
# the spacing, it would not read as a match.  This can be changed if
# there's anyone out there actually doing that.
# Note that this does not have a full check of wikilink validity, since
# an invalidly-formulated link could potentially land at RfD (although
# it would probably be speedily resolved).
GOOD = re.compile(r"""\{\{<includeonly>safesubst:<\/includeonly>\#invoke:RfD\|\|\|month = \w+
\|day = \d{1,2}
\|year = \d{4}
\|time = \d{2}:\d{2}
\|timestamp = \d{14}
<!-- The above content is generated by {{subst:rfd}}. -->
<!-- End of RFD message. Don't edit anything above here, but feel free to edit below here. -->|content=
\#[Rr][Ee][Dd][Ii][Rr][Ee][Cc][Tt] *\[\[.+?\]\]""")


def checkRfD(page: pwb.Page) -> bool:
    if not GOOD.match(page.text):
        return False
    # Ugly hack around <https://github.com/earwig/mwparserfromhell/issues/251>.
    parsed = parser.parse(page.text)
    parsed.replace("<includeonly>safesubst:</includeonly>#invoke:RfD",
                   "fake template")
    template = parsed.filter_templates()[0]
    year, month, day = (template.get(s).value.strip()
                        for s in ("year", "month", "day"))
    rfd = pwb.Page(
        pwb.Site(),
        title=f"Redirects for discussion/Log/{year} {month} {day}",
        ns=4  # Project:
    )
    filed = f'*<span id="{page.title()}">' in rfd.text
    if not filed:
        handle_unfiled(page, rfd)
    return filed


def handle_unfiled(page: pwb.Page, rfd: pwb.Page):
    log_local(page, "unfiledRfDs.txt")
    edited: pwb.Timestamp = page.editTime()  # Subclass of dt.datetime
    now = pwb.Site().server_time()
    # if now - edited > dt.timedelta(minutes=30):
        # log_onwiki(event=(f"* {page.title(as_link=True)} not filed to "
        #                   f"{rfd.title(as_link=True)} as of {now}\n"),
        #            title="Unfiled RfDs")
